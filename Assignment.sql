USE MAXB

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, STATUS	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);


CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;


--Task 1---

GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN
BEGIN TRY 
IF @PCUSTID < 1 OR @PCUSTID > 499
    THROW 50020, 'Customer ID out of range', 1 
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate customer ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_CUSTOMER @PCUSTID = 1, @PCUSTNAME ='TESTCUST1'
EXEC ADD_CUSTOMER @PCUSTID = 2, @PCUSTNAME ='TESTCUST2'
EXEC ADD_CUSTOMER @PCUSTID = 500, @PCUSTNAME ='TESTCUST2'

GO;

---TASK 2---
CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM CUSTOMER)
DELETE FROM CUSTOMER 
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_CUSTOMERS


GO;

---TASK 3---
CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS
BEGIN
BEGIN TRY 
IF @PPRODID < 1000 OR @PPRODID > 2500
    THROW 50020, 'Product ID out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

IF @PPRICE = 0 OR @PPRICE > 999.99
    THROW 50050, 'Price out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate Product ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_PRODUCT @PPRODID = 1003, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 1000 

GO;

SELECT * FROM PRODUCT

GO;
---TASK 4---
CREATE PROCEDURE DELETE_ALL_PRODUCTS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM PRODUCT)
DELETE FROM PRODUCT
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_PRODUCTS

GO;

---TASK 5---
CREATE PROCEDURE GET_CUSTOMER_STRING @PCUSTID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @CNAME NVARCHAR(100);
DECLARE @STATUS NVARCHAR(7);
DECLARE @SYTD MONEY;

SELECT @CNAME = CUSTNAME, @STATUS = STATUS, @SYTD = SALES_YTD
FROM CUSTOMER WHERE CUSTID = @PCUSTID;

SET @PRETURNSTRING = CONCAT('CustID: ', @PCUSTID, 'Name: ', @CNAME, 'Status: ', @STATUS, 'Sales YTD: ', @SYTD)
END
-- need to add error throws.

GO;

---TASK 6---
CREATE PROCEDURE UPD_CUST_SALESYTD @PCUSTID INT, @PAMT MONEY AS
BEGIN
SELECT SALES_YTD = @PAMT
FROM CUSTOMER WHERE CUSTID = @PCUSTID;
END

GO;
---TASK 7---
CREATE PROCEDURE GET_PROD_STRING @PPRODID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @PNAME NVARCHAR(100);
DECLARE @SELLPRICE NVARCHAR(7);
DECLARE @SYTD MONEY;

SELECT @PNAME = PRODNAME, @SELLPRICE = SELLING_PRICE, @SYTD = SALES_YTD
FROM CUSTOMER WHERE CUSTID = @PCUSTID;

SET @PRETURNSTRING = CONCAT('ProdID: ', @PPRODID, 'Name: ', @PNAME, 'PRICE: ', @SELLPRICE, 'Sales YTD: ', @SYTD)
END


GO;
---TASK 8---
CREATE PROCEDURE UPD_PROD_SALESYTD @PPRODID INT, @PAMT MONEY AS
BEGIN
SELECT SALES_YTD = @PAMT
FROM PRODUCT WHERE PRODID = @PPRODID;
END


GO;
---TASK 9---
CREATE PROCEDURE UPD_CUSTOMER_STATUS @PCUSTID INT, @PSTATUS NVARCHAR AS
BEGIN
SELECT STATUS = @PSTATUS
FROM CUSTOMER WHERE CUSTID = @PCUSTID;
END

---TASK 10---
CREATE PROCEDURE SUM_CUSTOMER_SALESYTD

---TASK 11---


---TASK 12---


---TASK 13---


---TASK 14---


---TASK 15---


---TASK 16---


---TASK 17---


---TASK 18---


---TASK 19---


---TASK 20---


---TASK 21---


---TASK 22---





























