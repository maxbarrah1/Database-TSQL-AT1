---Template Procedure---
/*
CREATE PROCEDURE XXXXXXXX @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN
BEGIN TRY 
IF XXXXX < 1 OR XXXX > 499
    THROW XXXX, 'Customer ID out of range', 1 
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = XXXXX
THROW 50010, 'Duplicate customer ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;
*/


USE MAXB
--Task 1---

IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN
BEGIN TRY 
IF @PCUSTID < 1 OR @PCUSTID > 499
    THROW 50020, 'Customer ID out of range', 1 
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate customer ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_CUSTOMER @PCUSTID = 1, @PCUSTNAME ='TESTCUST1'
EXEC ADD_CUSTOMER @PCUSTID = 2, @PCUSTNAME ='TESTCUST2'
EXEC ADD_CUSTOMER @PCUSTID = 5, @PCUSTNAME ='TESTCUST2'

GO;

---TASK 2---
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM CUSTOMER)
DELETE FROM CUSTOMER 
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_CUSTOMERS


GO;

---TASK 3---
IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;
GO

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS
BEGIN
BEGIN TRY 
IF @PPRODID < 1000 OR @PPRODID > 2500
    THROW 50020, 'Product ID out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

IF @PPRICE = 0 OR @PPRICE > 999.99
    THROW 50050, 'Price out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

IF @PPRODID = (SELECT PRODID FROM PRODUCT)
 THROW 50010, 'Duplicate Product ID', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate Product ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_PRODUCT @PPRODID = 1003, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 1000 

GO;

---TASK 4---
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;
GO

CREATE PROCEDURE DELETE_ALL_PRODUCTS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM PRODUCT)
DELETE FROM PRODUCT
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_PRODUCTS

EXEC DELETE_ALL_PRODUCTS

GO;

---TASK 5---
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;
GO

CREATE PROCEDURE GET_CUSTOMER_STRING @PCUSTID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @CNAME NVARCHAR(100);
DECLARE @STATUS NVARCHAR(7);
DECLARE @SYTD MONEY;
BEGIN TRY
    
    SELECT @CNAME = CUSTNAME, @STATUS = STATUS, @SYTD = SALES_YTD
        FROM CUSTOMER WHERE CUSTID = @PCUSTID
        
    IF @@ROWCOUNT = 0
    THROW 50060, 'Customer ID not found', 1
    ELSE
        SET @PRETURNSTRING = CONCAT('CustID: ', @PCUSTID, ' Name: ', @CNAME, ' Status: ', @STATUS, ' Sales YTD: ', @SYTD)
        PRINT CONCAT (' ', @PRETURNSTRING)
END TRY
BEGIN CATCH
BEGIN
    IF ERROR_NUMBER() = 50060
        THROW
    
    ELSE
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END;
END CATCH;
END;

EXEC GET_CUSTOMER_STRING @PCUSTID = 5, @PRETURNSTRING = ''

GO;
---TASK 6---
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_CUST_SALESYTD;
GO

CREATE PROCEDURE UPD_CUST_SALESYTD @PCUSTID INT, @PAMT MONEY AS
BEGIN
BEGIN TRY 
IF @PAMT < 0 OR @PAMT > 999.99
    THROW 50080, 'AMOUNT out of range', 1

    UPDATE CUSTOMER SET SALES_YTD = SALES_YTD + @PAMT
    WHERE CUSTID = @PCUSTID;
IF @@ROWCOUNT = 0
    THROW 50070, 'Customer ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50070, 50080)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC UPD_CUST_SALESYTD @PCUSTID = 5, @PAMT = 10

GO;

---TASK 7---
IF OBJECT_ID('GET_PROD_STRING') IS NOT NULL
DROP PROCEDURE GET_PROD_STRING;
GO

CREATE PROCEDURE GET_PROD_STRING @PPRODID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @PNAME NVARCHAR(100);
DECLARE @SELLPRICE NVARCHAR(7);
DECLARE @SYTD MONEY;
BEGIN TRY
    SELECT @PNAME = PRODNAME, @SELLPRICE = SELLING_PRICE, @SYTD = SALES_YTD
    FROM PRODUCT WHERE PRODID = @PPRODID;
        
    IF @@ROWCOUNT = 0
        THROW 50090, 'Product ID not found', 1
    ELSE
        SET @PRETURNSTRING = CONCAT('ProdID: ', @PPRODID, 'Name: ', @PNAME, 'PRICE: ', @SELLPRICE, 'Sales YTD: ', @SYTD)
        PRINT CONCAT (' ', @PRETURNSTRING)
END TRY
BEGIN CATCH
BEGIN
    IF ERROR_NUMBER() = 50070
        THROW
    
    ELSE
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END;
END CATCH;
END;

EXEC GET_PROD_STRING @PPRODID = 5, @PRETURNSTRING = ''

GO;

---TASK 8---
IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_PROD_SALESYTD;
GO

CREATE PROCEDURE UPD_PROD_SALESYTD @PPRODID INT, @PAMT MONEY AS

BEGIN
BEGIN TRY 
IF @PAMT < 0 OR @PAMT > 999.99
    THROW 50110, 'AMOUNT out of range', 1

UPDATE PRODUCT SET SALES_YTD = SALES_YTD + @PAMT
WHERE PRODID = @PPRODID;

IF @@ROWCOUNT = 0
    THROW 50100, 'Product ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50110, 50100)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC UPD_PROD_SALESYTD @PPRODID = 1, @PAMT = 5

GO;

---TASK 9---
IF OBJECT_ID('UPD_CUSTOMER_STATUS') IS NOT NULL
DROP PROCEDURE UPD_CUSTOMER_STATUS;
GO

CREATE PROCEDURE UPD_CUSTOMER_STATUS @PCUSTID INT, @PSTATUS NVARCHAR AS

BEGIN
BEGIN TRY 
IF @PSTATUS = 'OK' OR @PSTATUS = 'SUSPENDED' AND @PCUSTID = (SELECT CUSTID FROM CUSTOMER)
    UPDATE CUSTOMER SET STATUS = @PSTATUS



IF @PSTATUS <> 'OK' OR @PSTATUS <> 'SUSPENDED'
    THROW 50130, 'Invalid status value', 1



IF @@ROWCOUNT = 0
    THROW 50120, 'Product ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50120, 50130)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC UPD_CUSTOMER_STATUS @PCUSTID = 5, @PSTATUS = 'OK'

GO;

---TASK 10---
IF OBJECT_ID('ADD_SIMPLE_SALE') IS NOT NULL
DROP PROCEDURE ADD_SIMPLE_SALE;
GO

CREATE PROCEDURE ADD_SIMPLE_SALE @PCUSTID INT, @PPRODID INT, @PQTY INT AS
BEGIN
BEGIN TRY 
IF @PQTY < 1 OR @PQTY > 999
    THROW 50140, 'Sale Quantity outside valid range', 1



ELSE

    UPDATE CUSTOMER SET SALES_YTD = SALES_YTD * @PQTY
    WHERE CUSTID = @PCUSTID;

    UPDATE PRODUCT SET SALES_YTD = SALES_YTD * @PQTY
    WHERE PRODID = @PPRODID;
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 50160
THROW 50160, 'Customer ID not found', 1

ELSE IF ERROR_NUMBER() = 50170
THROW 50170, 'Product ID not found', 1

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC ADD_SIMPLE_SALE @PPRODID = 1003, @PCUSTID = 01, @PQTY = 5

GO;

---TASK 11---
IF OBJECT_ID('SUM_CUSTOMER_SALESYTD') IS NOT NULL
DROP PROCEDURE SUM_CUSTOMER_SALESYTD;
GO

CREATE PROCEDURE SUM_CUSTOMER_SALESYTD AS
BEGIN
BEGIN TRY 
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM CUSTOMER)
PRINT CONCAT('The total sum of sales for customer is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC SUM_CUSTOMER_SALESYTD

GO;

---TASK 12---
IF OBJECT_ID('SUM_PRODUCT_SALESYTD') IS NOT NULL
DROP PROCEDURE SUM_PRODUCT_SALESYTD;
GO

CREATE PROCEDURE SUM_PRODUCT_SALESYTD AS
BEGIN
BEGIN TRY 
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM PRODUCT)
PRINT CONCAT('The total sum of sales for product is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC SUM_PRODUCT_SALESYTD

GO;

---TASK 13---
IF OBJECT_ID('GET_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE GET_ALL_CUSTOMERS;
GO

CREATE PROCEDURE GET_ALL_CUSTOMERS @POUTCUR CURSOR  VARYING OUTPUT AS

BEGIN
    BEGIN TRY 
        SET @POUTCUR = CURSOR FOR SELECT CUSTID, [CUSTNAME], SALES_YTD, STATUS FROM CUSTOMER;
        OPEN @POUTCUR;
    END TRY

    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END CATCH;
END;

GO

BEGIN 
    DECLARE @OUTPUT CURSOR;
    DECLARE @ID INT;
    DECLARE @SYTD MONEY
    DECLARE @STAT NVARCHAR(7)
    DECLARE @NAME NVARCHAR(100)
    EXEC GET_ALL_CUSTOMERS @POUTCUR = @OUTPUT OUTPUT;
    FETCH NEXT FROM @OUTPUT INTO @ID, @NAME, @SYTD, @STAT;
    WHILE (@@FETCH_STATUS = 0)
        BEGIN
            PRINT(CONCAT(@ID, '   -   ', @NAME, ' ', @STAT));  
            FETCH NEXT FROM @OUTPUT INTO @ID, @NAME, @SYTD, @STAT;

        END
    CLOSE @OUTPUT 
    DEALLOCATE @OUTPUT
END;

---TASK 14---
IF OBJECT_ID('GET_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE GET_ALL_PRODUCTS;
GO


CREATE PROCEDURE GET_ALL_PRODUCTS @POUTCUR CURSOR  VARYING OUTPUT AS

BEGIN
    BEGIN TRY 
        SET @POUTCUR = CURSOR FOR SELECT PRODID, PRODNAME, SALES_YTD, SELLING_PRICE FROM PRODUCT;
        OPEN @POUTCUR;
    END TRY

    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END CATCH;
END;

GO;

BEGIN 
    DECLARE @OUTPUT CURSOR;
    DECLARE @PID INT;
    DECLARE @SYTD MONEY
    DECLARE @PRODNAME NVARCHAR(100)
    DECLARE @SELLINGPRICE MONEY
    EXEC GET_ALL_PRODUCTS @POUTCUR = @OUTPUT OUTPUT;
    FETCH NEXT FROM @OUTPUT INTO @PID, @PRODNAME, @SYTD, @SELLINGPRICE;
    WHILE (@@FETCH_STATUS = 0)
        BEGIN
            PRINT(CONCAT(@PID, '   -   ', @PRODNAME, ' ', @SYTD, ' ', @SELLINGPRICE));  
            FETCH NEXT FROM @OUTPUT INTO @PID, @SYTD, @PRODNAME, @SELLINGPRICE;

        END
    CLOSE @OUTPUT 
    DEALLOCATE @OUTPUT
END
GO

---TASK 15--- 
IF OBJECT_ID('ADD_LOCATION') IS NOT NULL
DROP PROCEDURE ADD_LOCATION;
GO

CREATE PROCEDURE ADD_LOCATION @PLOCCODE NVARCHAR, @PMINQTY INT, @PMAXQTY INT AS
BEGIN
BEGIN TRY 
 
IF @PLOCCODE = (SELECT LOCID FROM [LOCATION])
    THROW 50230, 'Duplicate location ID', 1 
    

IF LEN(@PLOCCODE) > 5
    THROW 50190, 'Location Code length invalid', 1 
    
IF @PMAXQTY < 1 OR @PMAXQTY > 999
    THROW 50210, 'Maximum Qty out of range', 1
    

IF @PMINQTY < 1 OR @PMINQTY > 999
    THROW 50200, 'Minimum Qty out of range', 1

IF @PMINQTY > @PMAXQTY 
THROW 50220, 'Minimum Qty larger than Maximum Qty', 1

IF @PLOCCODE != (SELECT LOCID FROM LOCATION) AND @PMINQTY > 1 OR @PMINQTY < 999 AND @PMAXQTY > 1 OR @PMAXQTY < 999 AND LEN(@PLOCCODE) > 5
    INSERT INTO LOCATION (LOCID, MINQTY, MAXQTY) 
    VALUES (@PLOCCODE, @PMINQTY, @PMAXQTY);


END TRY

BEGIN CATCH

BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC ADD_LOCATION @PLOCCODE = 'LOC01', @PMINQTY = 100, @PMAXQTY = 200

GO

---TASK 16---
IF OBJECT_ID('ADD_COMPLEX_SALE') IS NOT NULL
DROP PROCEDURE ADD_COMPLEX_SALE;
GO



CREATE PROCEDURE ADD_COMPLEX_SALE @PCUSTID INT, @PPRODID INT, @PQTY INT, @PDATE NVARCHAR(50) AS
BEGIN
BEGIN TRY 
    IF @PQTY < 1 OR @PQTY > 999
        THROW 50230, 'Salq quantity outside valid range', 1
    
    DECLARE @CONVERTEDDATE DATE;

    BEGIN TRY
        SET @CONVERTEDDATE = CONVERT(DATE, @PDATE, 112);
    END TRY
    BEGIN CATCH
        THROW 50250, 'Date not valid', 1
    END CATCH

    DECLARE @STATUS NVARCHAR(7);
    SELECT @STATUS = STATUS FROM CUSTOMER WHERE CUSTID = @PCUSTID;

    IF @STATUS IS NULL
        THROW 50260, 'Customer ID not found', 1

    IF @STATUS <> 'OK'
        THROW 50240, 'Customer status is not OK', 1
    
    DECLARE @UNITPRICE MONEY;
    SELECT @UNITPRICE = SELLING_PRICE FROM PRODUCT WHERE PRODID = @PPRODID;

    IF @UNITPRICE IS NULL
        THROW 50270, 'Product ID not found', 1
    
    INSERT INTO SALE (SALEID, CUSTID, PRODID, QTY, PRICE, SALEDATE)
    VALUES((SELECT NEXT VALUE FOR SALE_SEQ), @PCUSTID, @PPRODID, @PQTY, @UNITPRICE, @CONVERTEDDATE)

    DECLARE @TOTAL MONEY
    SET @TOTAL = @UNITPRICE * @PQTY


    EXEC UPD_PROD_SALESYTD @PPRODID, @TOTAL;
    EXEC UPD_CUST_SALESYTD @PCUSTID, @TOTAL;
END TRY

BEGIN CATCH 
    IF ERROR_NUMBER() IN (50230, 50240, 50250, 50260, 50270)
    THROW;
BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;
EXEC ADD_SIMPLE_SALE @PPRODID = 1003, @PCUSTID = 02, @PQTY = 5

GO


---TASK 17---
IF OBJECT_ID('GET_ALLSALES') IS NOT NULL
DROP PROCEDURE GET_ALLSALES;
GO

CREATE PROCEDURE GET_ALLSALES @POUTCUR CURSOR  VARYING OUTPUT AS

BEGIN
    BEGIN TRY 
        SET @POUTCUR = CURSOR FOR SELECT SALEID, CUSTID, PRODID, QTY, PRICE, SALEDATE FROM SALE;
        OPEN @POUTCUR;
    END TRY

    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END CATCH;
END;

GO

BEGIN 
    DECLARE @OUTPUT CURSOR;
    DECLARE @CUSTID INT;
    DECLARE @SALEID BIGINT;
    DECLARE @PRODID INT;
    DECLARE @PRICE MONEY
    DECLARE @SALEDATE DATE 
    DECLARE @QTY INT
    EXEC GET_ALLSALES @POUTCUR = @OUTPUT OUTPUT;
    FETCH NEXT FROM @OUTPUT INTO @CUSTID, @SALEID, @PRODID, @PRICE, @SALEDATE, @QTY;
    WHILE (@@FETCH_STATUS = 0)
        BEGIN
            PRINT(CONCAT(@CUSTID, ' ', @SALEID, ' ', @PRODID, ' ', @PRICE, ' ', @SALEDATE, ' ', @QTY));  
            FETCH NEXT FROM @OUTPUT INTO @CUSTID, @SALEID, @PRODID, @PRICE, @SALEDATE, @QTY;

        END
    CLOSE @OUTPUT 
    DEALLOCATE @OUTPUT
END
GO


---TASK 18---
IF OBJECT_ID('COUNT_PRODUCT_SALES') IS NOT NULL
DROP PROCEDURE COUNT_PRODUCT_SALES;
GO

CREATE PROCEDURE COUNT_PRODUCT_SALES AS
BEGIN
BEGIN TRY 
DECLARE @DATE DATETIME
SET @DATE = GETDATE()
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM CUSTOMER)

PRINT CONCAT('The total amount of sales from ', @date, ' is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC COUNT_PRODUCT_SALES

GO;

---TASK 19---
IF OBJECT_ID('DELETE_SALE') IS NOT NULL
DROP PROCEDURE DELETE_SALE;
GO

CREATE PROCEDURE DELETE_SALE @PCUSTID INT AS

BEGIN
BEGIN TRY
DECLARE @NUM INT
SET @NUM = (SELECT MIN(SALEID) FROM SALE)
IF @NUM = NULL
    THROW 50280, 'No sale rows found', 1

ELSE IF @NUM = (SELECT SALEID FROM SALE) 
    DELETE FROM SALE

END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_SALE @PCUSTID = 1

GO


---TASK 20---
IF OBJECT_ID('DELETE_ALL_SALES') IS NOT NULL
DROP PROCEDURE DELETE_ALL_SALES;
GO

CREATE PROCEDURE DELETE_ALL_SALES AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM SALE)
DELETE FROM SALE
UPDATE CUSTOMER SET SALES_YTD = 0
UPDATE PRODUCT SET SALES_YTD = 0
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_SALES

GO

---TASK 21--- NEED TO FIX
IF OBJECT_ID('DELETE_CUSTOMER') IS NOT NULL
DROP PROCEDURE DELETE_CUSTOMER;
GO

CREATE PROCEDURE DELETE_CUSTOMER @PCUSTID INT AS

BEGIN
BEGIN TRY

IF @PCUSTID != (SELECT CUSTID FROM CUSTOMER)
    
    THROW 50290, 'Customer ID not found', 1 

IF @PCUSTID = (SELECT CUSTID FROM CUSTOMER)
    THROW 50300, 'Customer cannot be deleted as sale exists', 1 

IF @PCUSTID = (SELECT CUSTID FROM CUSTOMER)
    DELETE FROM SALE

END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_CUSTOMER @PCUSTID = 1

GO

---TASK 22---
IF OBJECT_ID('DELETE_PRODUCT') IS NOT NULL
DROP PROCEDURE DELETE_PRODUCT;
GO

CREATE PROCEDURE DELETE_PRODUCT @PCUSTID INT AS

BEGIN
BEGIN TRY

IF @PCUSTID != (SELECT CUSTID FROM SALE)
    THROW 50290, 'Customer ID not found', 1 


IF @PCUSTID = (SELECT CUSTID FROM SALE)
SELECT CUSTID FROM SALE;
    THROW 50300, 'Customer cannot be deleted as sale exists', 1 

IF @PCUSTID = (SELECT CUSTID FROM SALE)

    DELETE FROM PRODUCT

END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_SALES

GO





























































