---Template Procedure---
/*
CREATE PROCEDURE XXXXXXXX @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN
BEGIN TRY 
IF XXXXX < 1 OR XXXX > 499
    THROW XXXX, 'Customer ID out of range', 1 
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = XXXXX
THROW 50010, 'Duplicate customer ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;
*/



--Task 1---
USE MAXB

GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN
BEGIN TRY 
IF @PCUSTID < 1 OR @PCUSTID > 499
    THROW 50020, 'Customer ID out of range', 1 
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate customer ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_CUSTOMER @PCUSTID = 1, @PCUSTNAME ='TESTCUST1'
EXEC ADD_CUSTOMER @PCUSTID = 2, @PCUSTNAME ='TESTCUST2'
EXEC ADD_CUSTOMER @PCUSTID = 500, @PCUSTNAME ='TESTCUST2'

GO;

---TASK 2---

CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM CUSTOMER)
DELETE FROM CUSTOMER 
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_CUSTOMERS


GO;

---TASK 3---

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS
BEGIN
BEGIN TRY 
IF @PPRODID < 1000 OR @PPRODID > 2500
    THROW 50020, 'Product ID out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

IF @PPRICE = 0 OR @PPRICE > 999.99
    THROW 50050, 'Price out of range', 1 
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 2627
THROW 50010, 'Duplicate Product ID', 1

ELSE IF ERROR_NUMBER() = 50020
THROW

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

EXEC ADD_PRODUCT @PPRODID = 1003, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 50 
EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'SHIRT', @PPRICE = 1000 

GO;

---TASK 4---

CREATE PROCEDURE DELETE_ALL_PRODUCTS AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM PRODUCT)
DELETE FROM PRODUCT
PRINT CONCAT ('The amount of rows deleted is ', @COUNTER);
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_PRODUCTS

GO;

---TASK 5---

CREATE PROCEDURE GET_CUSTOMER_STRING @PCUSTID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @CNAME NVARCHAR(100);
DECLARE @STATUS NVARCHAR(7);
DECLARE @SYTD MONEY;
BEGIN TRY
    
    SELECT @CNAME = CUSTNAME, @STATUS = STATUS, @SYTD = SALES_YTD
        FROM CUSTOMER WHERE CUSTID = @PCUSTID
        
    IF @@ROWCOUNT = 0
    THROW 50060, 'Customer ID not found', 1
    ELSE
        SET @PRETURNSTRING = CONCAT('CustID: ', @PCUSTID, 'Name: ', @CNAME, 'Status: ', @STATUS, 'Sales YTD: ', @SYTD)
        PRINT CONCAT (@PRETURNSTRING)
END TRY
BEGIN CATCH
BEGIN
    IF ERROR_NUMBER() = 50060
        THROW
    
    ELSE
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END;
END CATCH;
END;

GO;
---TASK 6---

CREATE PROCEDURE UPD_CUST_SALESYTD @PCUSTID INT, @PAMT MONEY AS
BEGIN
BEGIN TRY 
IF @PAMT < 999.99 OR @PAMT > 999.99
    THROW 50080, 'AMOUNT out of range', 1

    UPDATE CUSTOMER SET SALES_YTD = SALES_YTD + @PAMT
    WHERE CUSTID = @PCUSTID;
IF @@ROWCOUNT = 0
    THROW 50070, 'Customer ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50070, 50080)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 7---

CREATE PROCEDURE GET_PROD_STRING @PPRODID INT, @PRETURNSTRING NVARCHAR(1000) AS
BEGIN
DECLARE @PNAME NVARCHAR(100);
DECLARE @SELLPRICE NVARCHAR(7);
DECLARE @SYTD MONEY;
BEGIN TRY
    SELECT @PNAME = PRODNAME, @SELLPRICE = SELLING_PRICE, @SYTD = SALES_YTD
    FROM PRODUCT WHERE PRODID = @PPRODID;
        
    IF @@ROWCOUNT = 0
        THROW 50090, 'Product ID not found', 1
    ELSE
        SET @PRETURNSTRING = CONCAT('ProdID: ', @PPRODID, 'Name: ', @PNAME, 'PRICE: ', @SELLPRICE, 'Sales YTD: ', @SYTD)
        PRINT CONCAT (@PRETURNSTRING)
END TRY
BEGIN CATCH
BEGIN
    IF ERROR_NUMBER() = 50070
        THROW
    
    ELSE
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END;
END CATCH;
END;

GO;

---TASK 8---

CREATE PROCEDURE UPD_PROD_SALESYTD @PPRODID INT, @PAMT MONEY AS

BEGIN
BEGIN TRY 
IF @PAMT < 999.99 OR @PAMT > 999.99
    THROW 50110, 'AMOUNT out of range', 1

UPDATE PRODUCT SET SALES_YTD = SALES_YTD + @PAMT
WHERE PRODID = @PPRODID;

IF @@ROWCOUNT = 0
    THROW 50100, 'Product ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50110, 50100)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 9---

CREATE PROCEDURE UPD_CUSTOMER_STATUS @PCUSTID INT, @PSTATUS MONEY AS

BEGIN
BEGIN TRY 
IF @PSTATUS != 'OK' OR @PSTATUS != 'SUSPENDED'
    THROW 50130, 'AMOUNT out of range', 1

UPDATE CUSTOMER SET STATUS = @PSTATUS
WHERE CUSTID = @PCUSTID;

IF @@ROWCOUNT = 0
    THROW 50120, 'Product ID not found', 1
END TRY

BEGIN CATCH

IF ERROR_NUMBER() IN (50120, 50130)
THROW 

ELSE 
BEGIN 
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 10---
CREATE PROCEDURE ADD_SIMPLE_SALE @PCUSTID INT, @PPRODID INT, @PQTY INT AS
BEGIN
BEGIN TRY 
IF @PQTY < 1 OR @PQTY > 999
    THROW 50140, 'Sale Quantity outside valid range', 1

IF @@ROWCOUNT != 'OK'
    THROW 50150, 'Customer status is not ok', 1

ELSE
    UPDATE CUSTOMER SET SALES_YTD = SALES_YTD * @PQTY
    WHERE CUSTID = @PCUSTID;

    UPDATE PRODUCT SET SALES_YTD = SALES_YTD * @PQTY
    WHERE PRODID = @PPRODID;
END TRY

BEGIN CATCH

IF ERROR_NUMBER() = 50160
THROW 50160, 'Customer ID not found', 1

ELSE IF ERROR_NUMBER() = 50170
THROW 50170, 'Product ID not found', 1

ELSE
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 11---

CREATE PROCEDURE SUM_CUSTOMER_SALESYTD AS
BEGIN
BEGIN TRY 
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM CUSTOMER)
PRINT CONCAT('The total sum of sales for customer is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 12---

CREATE PROCEDURE SUM_PRODUCT_SALESYTD AS
BEGIN
BEGIN TRY 
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM PRODUCT)
PRINT CONCAT('The total sum of sales for product is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 13---

/* CREATE OR REPLACE
PROCEDURE get_emp_rs (p_deptno    IN  emp.deptno%TYPE,
                      p_recordset OUT SYS_REFCURSOR) AS 
BEGIN 
  OPEN p_recordset FOR
    SELECT ename,
           empno,
           deptno
    FROM   emp
    WHERE  deptno = p_deptno
    ORDER BY ename;
END GetEmpRS;
*/

CREATE PROCEDURE (@POUTCUR    IN  CUSTOMER.CUSTID%TYPE,
                      p_recordset OUT SYS_REFCURSOR) AS 
BEGIN 
  OPEN @POUTCUR FOR
    SELECT CUSTID,
           CUSTNAME,
           SALES_YTD,
           STATUS
    FROM   CUSTOMER
    WHERE  CUSTID = p_deptno
    ORDER BY ename;
END;

GO;
---TASK 14---


---TASK 15---
CREATE PROCEDURE ADD_LOCATION @PLOCCODE NVARCHAR, @PMINQTY INT, @PMAXQTY INT AS
BEGIN
BEGIN TRY 
IF @PLOCCODE = LOCCODE
    THROW 50230, 'Sale quantity outside valid range', 1 
    

IF LEN(@PLOCCODE) > 5
    THROW 50190, 'Location Code length invalid', 1 
    
IF @PMAXQTY < 1 OR @PMAXQTY > 999
    THROW 50210, 'Maximum Qty out of range', 1
    

IF @PMINQTY < 1 OR @PMINQTY > 999
    THROW 50200, 'Minimum Qty out of range', 1

IF @PMINQTY > @PMAXQTY 
THROW 50220, 'Minimum Qty larger than Maximum Qty', 1

IF @PLOCCODE != LOCCODE AND @PMINQTY > 1 OR @PMINQTY < 999 AND @PMAXQTY > 1 OR @PMAXQTY < 999 AND LEN(@PLOCCODE) > 5
    INSERT INTO LOCATION (LOCID, MINQTY, MAXQTY) 
    VALUES (@PLOCCODE, @PMINQTY, @PMAXQTY);


END TRY

BEGIN CATCH

BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 16---


---TASK 17---


---TASK 18---
CREATE PROCEDURE COUNT_PRODUCT_SALES AS
BEGIN
BEGIN TRY 
DECLARE @DATE DATETIME
SET @DATE = GETDATE()
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(SALES_YTD) FROM CUSTOMER)

PRINT CONCAT('The total amount of sales from ', @date, 'is ', @COUNTER)
END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

GO;

---TASK 19---


---TASK 20---
CREATE PROCEDURE DELETE_ALL_SALES AS

BEGIN
BEGIN TRY
DECLARE @COUNTER INT
SET @COUNTER = (SELECT COUNT(*) FROM SALE)
DELETE FROM SALE
UPDATE CUSTOMER SET SALES_YTD = 0
UPDATE PRODUCT SET SALES_YTD = 0
END TRY
BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_SALES

GO;

---TASK 21---
CREATE PROCEDURE DELETE_CUSTOMER @PCUSTID INT AS

BEGIN
BEGIN TRY

IF @PCUSTID != CUSTID
    
    THROW 50290, 'Customer ID not found', 1 


SELECT CUSTID FROM SALE;
IF @PCUSTID = CUSTID 
SELECT CUSTID FROM SALE;
    THROW 50300, 'Customer cannot be deleted as sale exists', 1 

IF @PCUSTID = CUSTID
    DELETE FROM SALES

END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_SALES

GO;

---TASK 22---
CREATE PROCEDURE DELETE_PRODUCT @PPRODID INT AS

BEGIN
BEGIN TRY

IF @PPRODID != PRODID
    THROW 50290, 'Customer ID not found', 1 

SELECT PRODID FROM SALE;
IF @PPRODID = PRODID
SELECT CUSTID FROM SALE;
    THROW 50300, 'Customer cannot be deleted as sale exists', 1 

IF @PPRODID = PRODID
SELECT PRODID FROM SALE;
    DELETE FROM PRODUCT

END TRY

BEGIN CATCH
BEGIN
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END;
END CATCH;
END;

EXEC DELETE_ALL_SALES

GO;





























































